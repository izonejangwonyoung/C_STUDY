//
// Created by 심우혁 on 4/17/24.
//
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_STACK_SIZE 100
#define MAZE_SIZE 6

typedef struct {
    short r;
    short c;
} element;

typedef struct {
    element data[MAX_STACK_SIZE];
    int top;
} StackType;

void init_stack(StackType *s)
{
    s->top = -1;
}

int is_empty(StackType *s)
{
    return (s->top == -1);
}
int is_full(StackType *s)
{
    return (s->top == (MAX_STACK_SIZE - 1));
}
void push(StackType *s, element item)
{
    if (is_full(s)) {
        fprintf(stderr, "포화 에러\n");
        return;
    }
    else s->data[++(s->top)] = item;
}
element pop(StackType *s)
{
    if (is_empty(s)) {
        fprintf(stderr, "공백 에러\n");
        exit(1);
    }
    else return s->data[(s->top)--];
}



element here = { 1,0 }, entry = { 1,0 };

char maze[MAZE_SIZE][MAZE_SIZE] = {
        { '1', '1', '1', '1', '1', '1' },
        { 'e', '0', '0', '0', '1', '1' },
        { '1', '1', '0', '1', '1', '1' },
        { '1', '1', '0', '1', '1', '1' },
        { '1', '0', '0', '0', '0', 'x' },
        { '1', '1', '1', '1', '1', '1' },
};
// ¿ßƒ°∏¶ Ω∫≈√ø° ª¿‘
void push_loc(StackType *s, int r, int c)
{
    if (r < 0 || c < 0) return;
    if (maze[r][c] != '1' && maze[r][c] != '.') {
        element tmp;
        tmp.r = r;
        tmp.c = c;
        push(s, tmp);
    }
}
void maze_print(char maze[MAZE_SIZE][MAZE_SIZE])
{
    for (int r = 0; r < MAZE_SIZE; r++) {
        for (int c = 0; c < MAZE_SIZE; c++) {
            printf("%c", maze[r][c]);
        }
        printf("\n"); // 여기에 개행 문자 출력
    }
    printf("\n");
}

int main(void)
{
    int r, c;
    StackType s;

    init_stack(&s);
    here = entry;
    while (maze[here.r][here.c] != 'x') {
        r = here.r;
        c = here.c;
        maze[r][c] = '.';
        maze_print(maze);
        push_loc(&s, r - 1, c);
        push_loc(&s, r + 1, c);
        push_loc(&s, r, c - 1);
        push_loc(&s, r, c + 1);
        if (is_empty(&s)) {
            printf("empty\n");
        }
        else
            here = pop(&s);
    }
    printf("종료\n");
    return 0;
}
